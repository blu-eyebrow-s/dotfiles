""Backspace有効化
set backspace=2
" この２つがhtml,php,cssのロード時間を遅延する原因
set enc=utf-8
set fenc=utf-8
"set guifont=Ricty\ Diminished\ Regular\ for\ Powerline:h14
"let g:airline_extensions = ['branch', 'tabline']
""vi互換をオフする
set nocompatible
syntax enable
let &t_Co=256
set background=dark
"colorscheme molokai
"colorscheme tender
"マウス操作
set mouse=a
"画面表示
set laststatus=2

"Set ctags
"set tags=./tags,tags

set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
set expandtab
set autoindent
set list
set listchars=tab:· ,trail:·
set number
set relativenumber
set ruler
set iminsert=0
"set title
set showmatch
"set tabline
set showtabline=2

set whichwrap=b,s,[,],<,>
"システムレベルの貼り付けを使うとき便利なトーグル
"有効・無効をf５キーで変換できる
set pastetoggle=<f5>
"No beep sounds
set noerrorbells
set vb t_vb=
"コメント折りたたみ機能の設定
set foldmethod=marker
"vim Speed up
"let loaded_matchparen=1
"-----------------------------------------
"Search
"-----------------------------------------
"インクリメンタルサーチ
set incsearch
"大文字/小文字を区別しない
set ignorecase
"大文字を含む場合は区別する
set smartcase
"検索語のハイライト
set hlsearch
"クリップボードにコピペ
set clipboard=unnamed
",autoselect
"検索結果のハイライトをESC連打で消す
noremap <Esc><Esc> :nohlsearch<CR>

inoremap {<Enter> {}<Left><CR><ESC><S-o>
inoremap [<Enter> []<Left><CR><ESC><S-o>
inoremap (<Enter> ()<Left><CR><ESC><S-o>

"-----------------------------------------
"ファイル処理関連
"-----------------------------------------
set autoread
set nobackup
set noswapfile

"-----------------------------------------
"カーソル移動関連
"-----------------------------------------
set scrolloff=8

" bundleで管理するディレクトリを指定
set runtimepath+=~/.vim/bundle/neobundle.vim/
call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/neocomplcache'
NeoBundleLazy 'Shougo/neosnippet.vim', {
    \ "autoload": {"insert": 1}}
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'tnker/vim-sencha-util'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'lilydjwg/colorizer'
NeoBundle 'surround.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'othree/html5.vim'
NeoBundle 'junegunn/vim-easy-align'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'bling/vim-airline'
NeoBundle 'jacoborus/tender'
call neobundle#end()
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       Vundle                        "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set nocompatible              " be iMproved, required
"filetype on                  " required
"
"" set the runtime path to include Vundle and initialize
"set rtp+=~/.vim/bundle/Vundle.vim
"call vundle#begin()
"
"Plugin 'Shougo/neocomplete'
"Plugin 'Shougo/neosnippet'
"Plugin 'Shougo/neosnippet-snippets'
"Plugin 'VundleVim/Vundle.vim'
"Plugin 'pangloss/vim-javascript'
"Plugin 'tpope/vim-fugitive'
"Plugin 'mattn/emmet-vim'
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
"Plugin 'bling/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'
"Plugin 'junegunn/vim-easy-align'
"Plugin 'scrooloose/nerdtree'
"Plugin 'lilydjwg/colorizer'
"Plugin 'surround.vim'
"Plugin 'MarcWeber/vim-addon-mw-utils'
"Plugin 'tomtom/tlib_vim'
"Plugin 'garbas/vim-snipmate'
"Plugin 'honza/vim-snippets'
"Plugin 'othree/html5.vim'
"Plugin 'burnettk/vim-angular'
"Plugin 'valloric/youcompleteme'
"
"" colorscheme
"Plugin 'jacoborus/tender'
"Plugin 'mhartington/oceanic-next'
"
"call vundle#end()            " required
"filetype plugin indent on    " required
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal

""""""""""""""""""""""""""""""""""""""""
"            neocomplete               "
""""""""""""""""""""""""""""""""""""""""
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

"""""""neocomplete end"""""""""""""""""""""""

" Disable AutoComplPop.
"let g:acp_enableAtStartup = 0
"" Use neocomplcache.
"let g:neocomplcache_enable_at_startup = 1
"" Use smartcase.
"let g:neocomplcache_enable_smart_case = 1
"" Use camel case completion.
"let g:neocomplcache_enable_camel_case_completion = 1
"" Use underbar completion.
"let g:neocomplcache_enable_underbar_completion = 1
"" Set minimum syntax keyword length.
"let g:neocomplcache_min_syntax_length = 3
"let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
"
""Define keyword.
"if !exists('g:neocomplcache_keyword_patterns')
"	let g:neocomplcache_keyword_patterns = {}
"endif
"let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
""Plugin key-mappings.
"imap <C-k>     <Plug>(neocomplcache_snippets_expand)
"smap <C-k>     <Plug>(neocomplcache_snippets_expand)
"inoremap <expr><C-g>     neocomplcache#undo_completion()
"inoremap <expr><C-l>     neocomplcache#complete_common_string()
"
""Recommended key-mappings.
""<CR>: close popup and save indent.
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
""<TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
""<C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
""inoremap <expr><C-y>  neocomplcache#close_popup()
"inoremap <expr><C-e>  neocomplcache#cancel_popup()
""AutoComplPop like behavior.
""let g:neocomplcache_enable_auto_select = 1
"
"
"" Plugin key-mappings.
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"smap <C-k>     <Plug>(neosnippet_expand_or_jump)
"xmap <C-k>     <Plug>(neosnippet_expand_target)
"
"" SuperTab like snippets behavior.
"imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"\ "\<Plug>(neosnippet_expand_or_jump)"
"\: pumvisible() ? "\<C-n>" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"\ "\<Plug>(neosnippet_expand_or_jump)"
"\: "\<TAB>"
"
" For conceal markers.
"if has('conceal')
"  set conceallevel=2 concealcursor=niv
"endif

" Sencha Plugin
"map <silent> <C-@> :SenchaMVVMToggle<CR>
"map <silent> <C-q> :SenchaParserReadCurrentLine<CR>

augroup fileTypeIndent
        autocmd!
        autocmd BufRead,BufNewFile *.php setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab
        autocmd BufRead,BufNewFile *.html setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab
        autocmd BufRead,BufNewFile *.js setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab
        autocmd BufRead,BufNewFile *.css setlocal shiftwidth=2 softtabstop=2 tabstop=2 expandtab
        autocmd BufRead,BufNewFile *.txt setlocal shiftwidth=2 softtabstop=2 tabstop=2 expandtab
        autocmd BufRead,BufNewFile *.xml setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab
        autocmd BufRead,BufNewFile *.scss setlocal shiftwidth=2 softtabstop=2 tabstop=2 expandtab
augroup END

" closetag setting
au Filetype html,xml,xsl source ~/.vim/scripts/closetag.vim 
" NERDTreeToggle Setting
nnoremap <silent><C-e> :NERDTreeToggle<CR>

set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<c-p>'
""""""""""""""""""""""""""""""""""
"             unite              "
""""""""""""""""""""""""""""""""""
"let g:unite_update_time = 1000
""nnoremap <silent> <C-u>  :<C-u>Unite file_mru<CR>
"nnoremap <silent> <C-n>  :<C-u>Unite buffer <CR>
"nnoremap <silent> <Leader>d :<C-u>Unite file<CR>
"autocmd FileType unite call s:unite_my_settings()
"function! s:unite_my_settings()
"  " Overwrite settings.
"  imap <buffer> jj <Plug>(unite_insert_leave)
"  imap <buffer> <ESC> <ESC><ESC>
"  nnoremap <buffer> t G
"  startinsert
"endfunction

"Vim Json Setting
"let g:html5_event_handler_attributes_complete = 0
"let g:html5_event_handler_attributes_complete = 0
"let g:html5_microdata_attributes_complete = 0
"let g:html5_aria_attributes_complete = 0

"easy-align
vnoremap <silent> <Enter> :EasyAlign<cr>

"powerline
"let g:Powerline_symbols = 'compatible'

"runtime macros/matchit.vim

"</で閉じタグを自動補完
autocmd FileType html inoremap <silent> <buffer> </ </<C-x><C-o>
autocmd FileType php inoremap <silent> <buffer> </ </<C-x><C-o>

"Jsonの整形（ダブルクオーテーションの隠し）
let g:vim_json_syntax_conceal = 0

"""""""""""""""""""""""""""""""""""""
"            Syntastic              "
"""""""""""""""""""""""""""""""""""""
" Execute Pathogen
" Syntasticのため、Pathogenをインストール
execute pathogen#infect()
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

"""""""""""""""""""""""""""""""""""""
"              Airline              "
"""""""""""""""""""""""""""""""""""""
let g:airline_extensions = ['tabline', 'branch']
let g:airline_right_sep = ' '
let g:airline_left_sep = ' '
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#right_sep = ' '
let g:airline#extensions#tabline#right_alt_sep = '|'

let g:airline_theme='tender'
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'

let g:solarized_termcolors=  256
let g:solarized_termtrans =  1
let g:solarized_degrade   =  1
let g:solarized_bold      =  0
let g:solarized_underline =  0
let g:solarized_italic    =  0
let g:solarized_contrast  =  "normal"
let g:solarized_visibility=  "normal"

